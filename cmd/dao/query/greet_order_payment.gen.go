// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"payment/cmd/dao/model"
)

func newOrderPayment(db *gorm.DB, opts ...gen.DOOption) orderPayment {
	_orderPayment := orderPayment{}

	_orderPayment.orderPaymentDo.UseDB(db, opts...)
	_orderPayment.orderPaymentDo.UseModel(&model.OrderPayment{})

	tableName := _orderPayment.orderPaymentDo.TableName()
	_orderPayment.ALL = field.NewAsterisk(tableName)
	_orderPayment.ID = field.NewInt64(tableName, "id")
	_orderPayment.OrderID = field.NewInt32(tableName, "order_id")
	_orderPayment.MemberID = field.NewInt32(tableName, "member_id")
	_orderPayment.OrderSerialNumber = field.NewString(tableName, "order_serial_number")
	_orderPayment.PaymentStatus = field.NewInt32(tableName, "payment_status")
	_orderPayment.PaymentSerialNumber = field.NewString(tableName, "payment_serial_number")
	_orderPayment.PaymentAmount = field.NewFloat64(tableName, "payment_amount")
	_orderPayment.PaymentType = field.NewInt32(tableName, "payment_type")
	_orderPayment.ThirdPaymentSerialNumber = field.NewString(tableName, "third_payment_serial_number")
	_orderPayment.ThirdPaymentTime = field.NewTime(tableName, "third_payment_time")
	_orderPayment.ThirdNotice = field.NewString(tableName, "third_notice")
	_orderPayment.DeletedAt = field.NewField(tableName, "deleted_at")
	_orderPayment.CreatedAt = field.NewTime(tableName, "created_at")
	_orderPayment.UpdatedAt = field.NewTime(tableName, "updated_at")

	_orderPayment.fillFieldMap()

	return _orderPayment
}

type orderPayment struct {
	orderPaymentDo orderPaymentDo

	ALL                      field.Asterisk
	ID                       field.Int64
	OrderID                  field.Int32   // 订单id
	MemberID                 field.Int32   // 用户id
	OrderSerialNumber        field.String  // 订单编号
	PaymentStatus            field.Int32   // 支付单状态1：已创建待支付；2：已支付；3：支付失败；4:支付异常,需要人工介入;
	PaymentSerialNumber      field.String  // 支付订单号
	PaymentAmount            field.Float64 // 支付单支付金额
	PaymentType              field.Int32   // 支付方式： 1：银联支付 2：支付宝支付 3：微信支付
	ThirdPaymentSerialNumber field.String  // 支付订单号
	ThirdPaymentTime         field.Time    // 第三方通知支付时间
	ThirdNotice              field.String  // 第三方通知结果
	DeletedAt                field.Field
	CreatedAt                field.Time
	UpdatedAt                field.Time

	fieldMap map[string]field.Expr
}

func (o orderPayment) Table(newTableName string) *orderPayment {
	o.orderPaymentDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderPayment) As(alias string) *orderPayment {
	o.orderPaymentDo.DO = *(o.orderPaymentDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderPayment) updateTableName(table string) *orderPayment {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OrderID = field.NewInt32(table, "order_id")
	o.MemberID = field.NewInt32(table, "member_id")
	o.OrderSerialNumber = field.NewString(table, "order_serial_number")
	o.PaymentStatus = field.NewInt32(table, "payment_status")
	o.PaymentSerialNumber = field.NewString(table, "payment_serial_number")
	o.PaymentAmount = field.NewFloat64(table, "payment_amount")
	o.PaymentType = field.NewInt32(table, "payment_type")
	o.ThirdPaymentSerialNumber = field.NewString(table, "third_payment_serial_number")
	o.ThirdPaymentTime = field.NewTime(table, "third_payment_time")
	o.ThirdNotice = field.NewString(table, "third_notice")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")

	o.fillFieldMap()

	return o
}

func (o *orderPayment) WithContext(ctx context.Context) IOrderPaymentDo {
	return o.orderPaymentDo.WithContext(ctx)
}

func (o orderPayment) TableName() string { return o.orderPaymentDo.TableName() }

func (o orderPayment) Alias() string { return o.orderPaymentDo.Alias() }

func (o *orderPayment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderPayment) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 14)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["member_id"] = o.MemberID
	o.fieldMap["order_serial_number"] = o.OrderSerialNumber
	o.fieldMap["payment_status"] = o.PaymentStatus
	o.fieldMap["payment_serial_number"] = o.PaymentSerialNumber
	o.fieldMap["payment_amount"] = o.PaymentAmount
	o.fieldMap["payment_type"] = o.PaymentType
	o.fieldMap["third_payment_serial_number"] = o.ThirdPaymentSerialNumber
	o.fieldMap["third_payment_time"] = o.ThirdPaymentTime
	o.fieldMap["third_notice"] = o.ThirdNotice
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
}

func (o orderPayment) clone(db *gorm.DB) orderPayment {
	o.orderPaymentDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderPayment) replaceDB(db *gorm.DB) orderPayment {
	o.orderPaymentDo.ReplaceDB(db)
	return o
}

type orderPaymentDo struct{ gen.DO }

type IOrderPaymentDo interface {
	gen.SubQuery
	Debug() IOrderPaymentDo
	WithContext(ctx context.Context) IOrderPaymentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderPaymentDo
	WriteDB() IOrderPaymentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderPaymentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderPaymentDo
	Not(conds ...gen.Condition) IOrderPaymentDo
	Or(conds ...gen.Condition) IOrderPaymentDo
	Select(conds ...field.Expr) IOrderPaymentDo
	Where(conds ...gen.Condition) IOrderPaymentDo
	Order(conds ...field.Expr) IOrderPaymentDo
	Distinct(cols ...field.Expr) IOrderPaymentDo
	Omit(cols ...field.Expr) IOrderPaymentDo
	Join(table schema.Tabler, on ...field.Expr) IOrderPaymentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderPaymentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderPaymentDo
	Group(cols ...field.Expr) IOrderPaymentDo
	Having(conds ...gen.Condition) IOrderPaymentDo
	Limit(limit int) IOrderPaymentDo
	Offset(offset int) IOrderPaymentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderPaymentDo
	Unscoped() IOrderPaymentDo
	Create(values ...*model.OrderPayment) error
	CreateInBatches(values []*model.OrderPayment, batchSize int) error
	Save(values ...*model.OrderPayment) error
	First() (*model.OrderPayment, error)
	Take() (*model.OrderPayment, error)
	Last() (*model.OrderPayment, error)
	Find() ([]*model.OrderPayment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderPayment, err error)
	FindInBatches(result *[]*model.OrderPayment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrderPayment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderPaymentDo
	Assign(attrs ...field.AssignExpr) IOrderPaymentDo
	Joins(fields ...field.RelationField) IOrderPaymentDo
	Preload(fields ...field.RelationField) IOrderPaymentDo
	FirstOrInit() (*model.OrderPayment, error)
	FirstOrCreate() (*model.OrderPayment, error)
	FindByPage(offset int, limit int) (result []*model.OrderPayment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderPaymentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderPaymentDo) Debug() IOrderPaymentDo {
	return o.withDO(o.DO.Debug())
}

func (o orderPaymentDo) WithContext(ctx context.Context) IOrderPaymentDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderPaymentDo) ReadDB() IOrderPaymentDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderPaymentDo) WriteDB() IOrderPaymentDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderPaymentDo) Session(config *gorm.Session) IOrderPaymentDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderPaymentDo) Clauses(conds ...clause.Expression) IOrderPaymentDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderPaymentDo) Returning(value interface{}, columns ...string) IOrderPaymentDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderPaymentDo) Not(conds ...gen.Condition) IOrderPaymentDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderPaymentDo) Or(conds ...gen.Condition) IOrderPaymentDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderPaymentDo) Select(conds ...field.Expr) IOrderPaymentDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderPaymentDo) Where(conds ...gen.Condition) IOrderPaymentDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderPaymentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOrderPaymentDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o orderPaymentDo) Order(conds ...field.Expr) IOrderPaymentDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderPaymentDo) Distinct(cols ...field.Expr) IOrderPaymentDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderPaymentDo) Omit(cols ...field.Expr) IOrderPaymentDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderPaymentDo) Join(table schema.Tabler, on ...field.Expr) IOrderPaymentDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderPaymentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderPaymentDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderPaymentDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderPaymentDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderPaymentDo) Group(cols ...field.Expr) IOrderPaymentDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderPaymentDo) Having(conds ...gen.Condition) IOrderPaymentDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderPaymentDo) Limit(limit int) IOrderPaymentDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderPaymentDo) Offset(offset int) IOrderPaymentDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderPaymentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderPaymentDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderPaymentDo) Unscoped() IOrderPaymentDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderPaymentDo) Create(values ...*model.OrderPayment) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderPaymentDo) CreateInBatches(values []*model.OrderPayment, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderPaymentDo) Save(values ...*model.OrderPayment) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderPaymentDo) First() (*model.OrderPayment, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPayment), nil
	}
}

func (o orderPaymentDo) Take() (*model.OrderPayment, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPayment), nil
	}
}

func (o orderPaymentDo) Last() (*model.OrderPayment, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPayment), nil
	}
}

func (o orderPaymentDo) Find() ([]*model.OrderPayment, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderPayment), err
}

func (o orderPaymentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderPayment, err error) {
	buf := make([]*model.OrderPayment, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderPaymentDo) FindInBatches(result *[]*model.OrderPayment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderPaymentDo) Attrs(attrs ...field.AssignExpr) IOrderPaymentDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderPaymentDo) Assign(attrs ...field.AssignExpr) IOrderPaymentDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderPaymentDo) Joins(fields ...field.RelationField) IOrderPaymentDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderPaymentDo) Preload(fields ...field.RelationField) IOrderPaymentDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderPaymentDo) FirstOrInit() (*model.OrderPayment, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPayment), nil
	}
}

func (o orderPaymentDo) FirstOrCreate() (*model.OrderPayment, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPayment), nil
	}
}

func (o orderPaymentDo) FindByPage(offset int, limit int) (result []*model.OrderPayment, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderPaymentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderPaymentDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderPaymentDo) Delete(models ...*model.OrderPayment) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderPaymentDo) withDO(do gen.Dao) *orderPaymentDo {
	o.DO = *do.(*gen.DO)
	return o
}
