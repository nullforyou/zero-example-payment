// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"payment/cmd/dao/model"
)

func newOrderPaymentNotice(db *gorm.DB, opts ...gen.DOOption) orderPaymentNotice {
	_orderPaymentNotice := orderPaymentNotice{}

	_orderPaymentNotice.orderPaymentNoticeDo.UseDB(db, opts...)
	_orderPaymentNotice.orderPaymentNoticeDo.UseModel(&model.OrderPaymentNotice{})

	tableName := _orderPaymentNotice.orderPaymentNoticeDo.TableName()
	_orderPaymentNotice.ALL = field.NewAsterisk(tableName)
	_orderPaymentNotice.ID = field.NewInt64(tableName, "id")
	_orderPaymentNotice.PaymentSerialNumber = field.NewString(tableName, "payment_serial_number")
	_orderPaymentNotice.ThirdNotice = field.NewString(tableName, "third_notice")
	_orderPaymentNotice.DeletedAt = field.NewField(tableName, "deleted_at")
	_orderPaymentNotice.CreatedAt = field.NewTime(tableName, "created_at")
	_orderPaymentNotice.UpdatedAt = field.NewTime(tableName, "updated_at")

	_orderPaymentNotice.fillFieldMap()

	return _orderPaymentNotice
}

type orderPaymentNotice struct {
	orderPaymentNoticeDo orderPaymentNoticeDo

	ALL                 field.Asterisk
	ID                  field.Int64
	PaymentSerialNumber field.String // 支付订单号
	ThirdNotice         field.String // 第三方通知结果
	DeletedAt           field.Field
	CreatedAt           field.Time
	UpdatedAt           field.Time

	fieldMap map[string]field.Expr
}

func (o orderPaymentNotice) Table(newTableName string) *orderPaymentNotice {
	o.orderPaymentNoticeDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderPaymentNotice) As(alias string) *orderPaymentNotice {
	o.orderPaymentNoticeDo.DO = *(o.orderPaymentNoticeDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderPaymentNotice) updateTableName(table string) *orderPaymentNotice {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.PaymentSerialNumber = field.NewString(table, "payment_serial_number")
	o.ThirdNotice = field.NewString(table, "third_notice")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")

	o.fillFieldMap()

	return o
}

func (o *orderPaymentNotice) WithContext(ctx context.Context) IOrderPaymentNoticeDo {
	return o.orderPaymentNoticeDo.WithContext(ctx)
}

func (o orderPaymentNotice) TableName() string { return o.orderPaymentNoticeDo.TableName() }

func (o orderPaymentNotice) Alias() string { return o.orderPaymentNoticeDo.Alias() }

func (o *orderPaymentNotice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderPaymentNotice) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 6)
	o.fieldMap["id"] = o.ID
	o.fieldMap["payment_serial_number"] = o.PaymentSerialNumber
	o.fieldMap["third_notice"] = o.ThirdNotice
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
}

func (o orderPaymentNotice) clone(db *gorm.DB) orderPaymentNotice {
	o.orderPaymentNoticeDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderPaymentNotice) replaceDB(db *gorm.DB) orderPaymentNotice {
	o.orderPaymentNoticeDo.ReplaceDB(db)
	return o
}

type orderPaymentNoticeDo struct{ gen.DO }

type IOrderPaymentNoticeDo interface {
	gen.SubQuery
	Debug() IOrderPaymentNoticeDo
	WithContext(ctx context.Context) IOrderPaymentNoticeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderPaymentNoticeDo
	WriteDB() IOrderPaymentNoticeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderPaymentNoticeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderPaymentNoticeDo
	Not(conds ...gen.Condition) IOrderPaymentNoticeDo
	Or(conds ...gen.Condition) IOrderPaymentNoticeDo
	Select(conds ...field.Expr) IOrderPaymentNoticeDo
	Where(conds ...gen.Condition) IOrderPaymentNoticeDo
	Order(conds ...field.Expr) IOrderPaymentNoticeDo
	Distinct(cols ...field.Expr) IOrderPaymentNoticeDo
	Omit(cols ...field.Expr) IOrderPaymentNoticeDo
	Join(table schema.Tabler, on ...field.Expr) IOrderPaymentNoticeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderPaymentNoticeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderPaymentNoticeDo
	Group(cols ...field.Expr) IOrderPaymentNoticeDo
	Having(conds ...gen.Condition) IOrderPaymentNoticeDo
	Limit(limit int) IOrderPaymentNoticeDo
	Offset(offset int) IOrderPaymentNoticeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderPaymentNoticeDo
	Unscoped() IOrderPaymentNoticeDo
	Create(values ...*model.OrderPaymentNotice) error
	CreateInBatches(values []*model.OrderPaymentNotice, batchSize int) error
	Save(values ...*model.OrderPaymentNotice) error
	First() (*model.OrderPaymentNotice, error)
	Take() (*model.OrderPaymentNotice, error)
	Last() (*model.OrderPaymentNotice, error)
	Find() ([]*model.OrderPaymentNotice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderPaymentNotice, err error)
	FindInBatches(result *[]*model.OrderPaymentNotice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrderPaymentNotice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderPaymentNoticeDo
	Assign(attrs ...field.AssignExpr) IOrderPaymentNoticeDo
	Joins(fields ...field.RelationField) IOrderPaymentNoticeDo
	Preload(fields ...field.RelationField) IOrderPaymentNoticeDo
	FirstOrInit() (*model.OrderPaymentNotice, error)
	FirstOrCreate() (*model.OrderPaymentNotice, error)
	FindByPage(offset int, limit int) (result []*model.OrderPaymentNotice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderPaymentNoticeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderPaymentNoticeDo) Debug() IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Debug())
}

func (o orderPaymentNoticeDo) WithContext(ctx context.Context) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderPaymentNoticeDo) ReadDB() IOrderPaymentNoticeDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderPaymentNoticeDo) WriteDB() IOrderPaymentNoticeDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderPaymentNoticeDo) Session(config *gorm.Session) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderPaymentNoticeDo) Clauses(conds ...clause.Expression) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderPaymentNoticeDo) Returning(value interface{}, columns ...string) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderPaymentNoticeDo) Not(conds ...gen.Condition) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderPaymentNoticeDo) Or(conds ...gen.Condition) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderPaymentNoticeDo) Select(conds ...field.Expr) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderPaymentNoticeDo) Where(conds ...gen.Condition) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderPaymentNoticeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOrderPaymentNoticeDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o orderPaymentNoticeDo) Order(conds ...field.Expr) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderPaymentNoticeDo) Distinct(cols ...field.Expr) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderPaymentNoticeDo) Omit(cols ...field.Expr) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderPaymentNoticeDo) Join(table schema.Tabler, on ...field.Expr) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderPaymentNoticeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderPaymentNoticeDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderPaymentNoticeDo) Group(cols ...field.Expr) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderPaymentNoticeDo) Having(conds ...gen.Condition) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderPaymentNoticeDo) Limit(limit int) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderPaymentNoticeDo) Offset(offset int) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderPaymentNoticeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderPaymentNoticeDo) Unscoped() IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderPaymentNoticeDo) Create(values ...*model.OrderPaymentNotice) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderPaymentNoticeDo) CreateInBatches(values []*model.OrderPaymentNotice, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderPaymentNoticeDo) Save(values ...*model.OrderPaymentNotice) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderPaymentNoticeDo) First() (*model.OrderPaymentNotice, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPaymentNotice), nil
	}
}

func (o orderPaymentNoticeDo) Take() (*model.OrderPaymentNotice, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPaymentNotice), nil
	}
}

func (o orderPaymentNoticeDo) Last() (*model.OrderPaymentNotice, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPaymentNotice), nil
	}
}

func (o orderPaymentNoticeDo) Find() ([]*model.OrderPaymentNotice, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderPaymentNotice), err
}

func (o orderPaymentNoticeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderPaymentNotice, err error) {
	buf := make([]*model.OrderPaymentNotice, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderPaymentNoticeDo) FindInBatches(result *[]*model.OrderPaymentNotice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderPaymentNoticeDo) Attrs(attrs ...field.AssignExpr) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderPaymentNoticeDo) Assign(attrs ...field.AssignExpr) IOrderPaymentNoticeDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderPaymentNoticeDo) Joins(fields ...field.RelationField) IOrderPaymentNoticeDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderPaymentNoticeDo) Preload(fields ...field.RelationField) IOrderPaymentNoticeDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderPaymentNoticeDo) FirstOrInit() (*model.OrderPaymentNotice, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPaymentNotice), nil
	}
}

func (o orderPaymentNoticeDo) FirstOrCreate() (*model.OrderPaymentNotice, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPaymentNotice), nil
	}
}

func (o orderPaymentNoticeDo) FindByPage(offset int, limit int) (result []*model.OrderPaymentNotice, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderPaymentNoticeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderPaymentNoticeDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderPaymentNoticeDo) Delete(models ...*model.OrderPaymentNotice) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderPaymentNoticeDo) withDO(do gen.Dao) *orderPaymentNoticeDo {
	o.DO = *do.(*gen.DO)
	return o
}
