// Code generated by goctl. DO NOT EDIT.
// Source: payment.proto

package server

import (
	"context"

	"payment/cmd/rpc/internal/logic"
	"payment/cmd/rpc/internal/svc"
	"greet-pb/payment/types/payment"
)

type PaymentServer struct {
	svcCtx *svc.ServiceContext
	payment.UnimplementedPaymentServer
}

func NewPaymentServer(svcCtx *svc.ServiceContext) *PaymentServer {
	return &PaymentServer{
		svcCtx: svcCtx,
	}
}

// 创建支付单
func (s *PaymentServer) CreatePayment(ctx context.Context, in *payment.CreatePaymentReq) (*payment.CreatePaymentReply, error) {
	l := logic.NewCreatePaymentLogic(ctx, s.svcCtx)
	return l.CreatePayment(in)
}

// 支付结果通知
func (s *PaymentServer) OrderPaymentNoticeTccTry(ctx context.Context, in *payment.PaymentNoticeReq) (*payment.PaymentNoticePayReply, error) {
	l := logic.NewOrderPaymentNoticeTccTryLogic(ctx, s.svcCtx)
	return l.OrderPaymentNoticeTccTry(in)
}

func (s *PaymentServer) OrderPaymentNoticeTccConfirm(ctx context.Context, in *payment.PaymentNoticeReq) (*payment.PaymentNoticePayReply, error) {
	l := logic.NewOrderPaymentNoticeTccConfirmLogic(ctx, s.svcCtx)
	return l.OrderPaymentNoticeTccConfirm(in)
}

func (s *PaymentServer) OrderPaymentNoticeTccCancel(ctx context.Context, in *payment.PaymentNoticeReq) (*payment.PaymentNoticePayReply, error) {
	l := logic.NewOrderPaymentNoticeTccCancelLogic(ctx, s.svcCtx)
	return l.OrderPaymentNoticeTccCancel(in)
}
